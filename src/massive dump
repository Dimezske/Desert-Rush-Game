//import MeleeWeapons from './game/weapons';
//import SchimitarImg from './assets/schimitar.png';
        //this.load.image('ground', GroundImg);
        //this.load.image('platform', PlatformImg);
        //this.load.image('mplatform', PlatformImg);
        //this.load.json('level_platform', 'src/leveldata/level_platform.json');
        //this.load.json('level_mplatforms', 'src/leveldata/level_mplatforms.json');

//this.load.image('mCloud', CloudsImg);
        /*
        var particles = this.add.particles('clouds');
        this.cloudsEmitter = particles.createEmitter({
            frame: [ 'red', 'blue', 'green', 'yellow' ],
            x: 400,
            y: 300,
            speed: 200,
            lifespan: 3000,
            blendMode: 'ADD'
        });*/
//const background = this.add.image(1450/2, 775/2, 'background');
		//background.setScale(Math.max(1450 / background.width, 775 / background.height))
        //.setScrollFactor(0);
        //this.add.image(width * 0.5, height * 0.5, 'sky')
        //.setScrollFactor(0)

        //createAligned(this, totalWidth, 'mountains', 0.25)
        //createAligned(this, totalWidth, 'plateau2', 0.35)
        //createAligned(this, totalWidth, 'plateau', 0.5)
        //-------------Player Test-------------------------------------
            // our player sprite created through the physics system
            //this.player = this.add.sprite(0, 0, 'player', 6);
            //this.container = this.add.container(playerInfo.x, playerInfo.y);
            //this.container.setSize(16, 16);
           // this.physics.world.enable(this.container);
            //this.container.add(this.player);
            // update camera
            //this.updateCamera();
            // don't go out of the map
           //this.container.body.setCollideWorldBounds(true);
           
        //--------------Player----------------------------------------
        
        //this.cameras.main.setDeadzone(this.scale.width * 1.5)
        //var container = this.add.container(this.player.x, this.player.y)
        //container.cursors = this.input.keyboard.createCursorKeys();
        //-------------EnermyTest--------------------------------
        
        //---------------Weapons-------------------------------------
        
        //this.schimitar = this.add.existing(new SchimitarWeapon(this, this.player.x, this.player.y, 'schimitar-sprite', 0))
        //this.schimitar = this.add.sprite(this.player.x, this.player.y, 'schimitar-sprite');

//var player = this.add.container(200, 200, [this.physics.add.existing(new Player(this, 0, 0, 'player-sprite', 0)), this.physics.add.existing(new SchimitarWeapon(this, this.player.x, this.player.y, 'schimitar-sprite', 0)).setVisible(false)])
        //    .setDepth(1).setScale(0.7);
        /*
        this.keys = {
            attack: this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.D)
        };
        this.anims.create({
			key: 'idle',
			frames: this.anims.generateFrameNumbers('schimitar', {start: 2, end: 2 }),
			frameRate: 15,
			repeat: -1
		});
		this.anims.create({
			key: 'left',
			frames: this.anims.generateFrameNumbers('schimitar', {start: 3, end: 3 }),
			frameRate: 10,
			repeat: -1
		});
		this.anims.create({
			key: 'right',
			frames: this.anims.generateFrameNumbers('schimitar', {start: 2, end: 2 }),
			frameRate: 10,
			repeat: -1
		});
		this.anims.create({
			key: 'attack-left',
			frames: this.anims.generateFrameNumbers('schimitar', {start: 1, end: 0 }),
			frameRate: 15,
		});
		this.anims.create({
			key: 'attack-right',
			frames: this.anims.generateFrameNumbers('schimitar', {start: 4, end: 5 }),
			frameRate: 10,
		});  
        var player = this.add.container(200, 200, [this.add.sprite(0,0, 'player-sprite', 0), this.add.sprite(0,0, 'schimitar-sprite').setVisible(false)])
            .setDepth(1).setScale(0.7);

            this.input.keyboard.on(['attack'],() =>{
                (this.player.Array[0] as Phaser.GameObjects.Sprite).play('attack-left');
                this.player.Array[1].play('attack-left');
            })*/

        //console.log(this.levelData_Ground);

        //this.levelData_Platforms = this.cache.json.get('level_platform');
        //console.log(this.levelData_Platforms);

        //this.levelData_mPlatforms = this.cache.json.get('level_mplatforms');
        //console.log(this.levelData_mPlatforms);
                /*
        this.levelData_Ground.platformData.forEach(function(element){
            this.platforms.create(element.x, element.y, 'ground');
        }, this)*/
        /*
        this.platform = [];
        this.levelData_Platforms = this.cache.json.get('level_platform');
        this.levelData_Platforms.platformData.forEach(function(element){
            this.platform.push(new Platforms(this, element.x, element.y, 'platform', element.scale));
        }, this)
        
        this.mPlatform = [];
        this.levelData_mPlatforms = this.cache.json.get('level_mplatforms');
        this.levelData_mPlatforms.platformData.forEach(function(element){
            this.mPlatform.push(new Platforms(this, element.x, element.y, element.scale));
        }, this)
        */
       /*
        this.platform = [];
        this.levelData_level1.platformData.forEach(function(element){
            this.platform.push(new Platforms(this, element.x, element.y, 'platform', element.scale));
        }, this)

        this.mPlatform = [];
        this.levelData_level1.movingPlatformData.forEach(function(element){
            this.mPlatform.push(new MovingPlatforms(this, element.x, element.y, element.scale, element.movementType, element.time, element.distance));
        }, this)*/

        //this.levelData_Platforms.platformData.forEach(function(element){
        //    this.platforms.create(element.x, element.y, 'platform');
        //}, this)

               
                //this.mCloud.checkCloudMovement()
        //this.mCloud.setCloudMovement()
                //this.cloud.movingClouds();